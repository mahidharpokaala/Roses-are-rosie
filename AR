import cv2
import numpy as np

# Load the video file or use the webcam
video_capture = cv2.VideoCapture(0)  # Change the parameter to a video file path if desired

# Load the image you want to overlay (AR content)
overlay_image = cv2.imread('overlay_image.png')  # Replace 'overlay_image.png' with your own image file

while True:
    # Read each frame of the video
    ret, frame = video_capture.read()

    # If using a video file, check if there are no more frames
    if not ret:
        break

    # Resize the overlay image to match the frame size
    overlay_image = cv2.resize(overlay_image, (frame.shape[1], frame.shape[0]))

    # Convert the overlay image to grayscale
    overlay_gray = cv2.cvtColor(overlay_image, cv2.COLOR_BGR2GRAY)

    # Threshold the grayscale image to create a mask
    _, overlay_mask = cv2.threshold(overlay_gray, 10, 255, cv2.THRESH_BINARY)

    # Invert the mask to black out the area where the overlay will be placed
    overlay_mask_inv = cv2.bitwise_not(overlay_mask)

    # Extract the region of interest from the frame
    roi = cv2.bitwise_and(frame, frame, mask=overlay_mask_inv)

    # Extract the overlay region from the overlay image
    overlay = cv2.bitwise_and(overlay_image, overlay_image, mask=overlay_mask)

    # Add the overlay onto the frame
    output = cv2.add(roi, overlay)

    # Display the resulting frame
    cv2.imshow('AR Application', output)

    # Exit the application if the 'q' key is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture and close all windows
video_capture.release()
cv2.destroyAllWindows()
